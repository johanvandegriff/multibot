PROOF OF CONCEPT:
+main page (on main container)
+links to each tenant on main page (view without logging in)
+login button on main page
+log in with twitch, session saved in state db, redirected to tenant page
+tenant page (on tenant container)
+see if u are logged in or not on tenant page
+router redirects sub-urls to tenant page
+see chat on tenant page
+nav bar with all the channels, and home
    +store the list of channels in redis
    +make the nav bar programmatic
    +gray out the nav bar item you are on currently
+nicknames shown on admin page
+add/edit nicknames on admin page
    +add authentication to setting nicknames

+only twitch chat for now
+manually create tenant containers for now
+hardcoded to 2 tenant containers to start
+no k8s (docker-compose for now)

+make a README for the proof of concept
+clean up code
+commit the code

EXISTING FEATURES:
+pop out chat
+super admin
+twitch authentication (need to split between containers and store sessions in state DB)
+channel and viewer properties system
+emotes from twitch, BTTV, FFZ, 7TV (global and channel)
+pronouns from alejo
+user can set nickname
+bot greets users by nickname, timeout for welcome and welcome back
+custom greeting for a viewer
+option to show/hide usernames,nicknames,pronouns,background in chat
+authentication on the data APIs to only work for the specific channel
+nicknames
+connect to twitch chat
+connect to youtube chat
+forward selected youtube commands to twitch
+connect to owncast chat
+connect to kick chat
+send combined chat to frontend (socket.io or websockets)
+send events to frontend (nicknames, channel/viewer property changed, channel enabled/disabled)
+clear chat command and api
+find youtube id by url/username
+twitch mods have permission to clear the chat with !clear
+!help/!commands currently a static message
+!botpage -> link to full page
+!multichat -> link to multichat only
+!clear -> clear multichat page
+decide what to keep/remove: !nickname !username !unsetnickname !setnickname
+enable/disable the bot on your channel
+timeout on enabling/disabling the bot to avoid spam
+gray out button when on timeout
+get list of all channels (any that have a tenant container, hardcode for now)
(skipped) need to revamp: CARL chatbot responds when @'ed, except by other bots
(skipped) prob dont need: random nickname if none provided
(skipped) prob dont need: get list of enabled channels and adjust dropdown accordingly, with super admin seeing all
(skipped) remove, no one uses it: query a nickname/username with the other

NEW FEATURES TO ADD:
+move proxy to main-container and delete router-container
+deploy on k8s locally with minikube
+able to query k8s data from within main-container with nodejs library
+able to spin up tenant containers from within main-container
+spin up tenant containers based on what's onboarded already
+easy sign up
+login directs u to either your page (if you are already in the system, how it works currently), or back to onboarding page where you can see the progress of spinning things up, then redirects u to your page once it is up (not returning 404)
+super admin can onboard and offboard any channel
+backend prevent onboarding if already onboarded and vice versa
+link to channel page in top right should not be clickable if not onboarded
+make on/offboard return error if failed to deploy to k8s, but app still works (e.g. running with ./run-node.sh or ./run-compose.sh)
+some way to enable channels in run-test.sh and run-compose.sh (enable whatever channels are in PROXY_OVERRIDES)
+issue with load balancer: one main container updates its routes but the rest have no clue - need to poll the channels list and update routes when one is added/removed
+need 3 successes in a row in wait_for_page

+deploy to digitalocean k8s and managed redis
+add https
+remove old load balancer
+fixed: not pulling latest docker in prod because of setting
+deploy new without deleting first for less downtime
+remove custom button since it cannot show arbitrary channels
+change multistream-bot to multibot
+move to the "multibot" namespace
+migrate data from v1 to v2
+deploy v2 on botbot.jjv.sh
+make jjv.sh all point to k8s and change TTL back to 3600
+move v2 to the main repo dir
+fix up README
+fix websockets
+fix intermittent timeouts (issue was deployment and service being named the same thing)
+add cpu limits and horizontal pod autoscaling
+add pod disruption budget to make nodes scale down better
+redis backups
+move redis data to a "namespace" (just a prefix "multibot:" on all the key names)

+keep track of version and if mismatch, send reload request
+auto reload if popout chat, otherwise ask to reload
+font selector: twitch font (current), discord font ('gg sans', 'Noto Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; check license (it was not allowed so found a similar one)), arial, etc.
+add text-shadow to chat: darken the background behind the text while keeping the text at full opacity

MIGRATE FROM NODEJS TO GOLANG:
+measure the memory, cpu, etc. usage before deploying golang (this is the reason for migrating)
NAMESPACE        NAME                                                 CPU(cores)   MEMORY(bytes)   
cert-manager     cert-manager-9f64787fb-vrvj8                         1m           27Mi            
cert-manager     cert-manager-cainjector-56c6b7f795-lb67j             1m           35Mi            
cert-manager     cert-manager-webhook-84d5dfd488-8x52n                1m           14Mi            
ingress-nginx    ingress-nginx-controller-7d56585cd5-b4lpp            1m           48Mi            
kube-system      cilium-4ns56                                         19m          242Mi           
kube-system      cilium-bwn6f                                         12m          180Mi           
kube-system      cilium-g2nst                                         16m          183Mi           
kube-system      cilium-wzzdn                                         11m          182Mi           
kube-system      coredns-c5c6457c-nwwhk                               2m           23Mi            
kube-system      coredns-c5c6457c-vrhhj                               2m           23Mi            
kube-system      cpc-bridge-proxy-2qkrt                               0m           1Mi             
kube-system      cpc-bridge-proxy-542qw                               0m           1Mi             
kube-system      cpc-bridge-proxy-74dpc                               1m           2Mi             
kube-system      cpc-bridge-proxy-wbtsc                               0m           1Mi             
kube-system      csi-do-node-5xbqm                                    1m           10Mi            
kube-system      csi-do-node-g7bbg                                    1m           14Mi            
kube-system      csi-do-node-l6cs7                                    1m           10Mi            
kube-system      csi-do-node-wmrkc                                    1m           10Mi            
kube-system      do-node-agent-5l2z6                                  0m           24Mi            
kube-system      do-node-agent-blf9m                                  0m           19Mi            
kube-system      do-node-agent-f7lkh                                  0m           20Mi            
kube-system      do-node-agent-ws54w                                  0m           24Mi            
kube-system      hubble-relay-67597fb8-9sk57                          1m           23Mi            
kube-system      hubble-ui-79957d9f7b-pjf27                           1m           22Mi            
kube-system      konnectivity-agent-5vrjl                             1m           9Mi             
kube-system      konnectivity-agent-dfszf                             1m           10Mi            
kube-system      konnectivity-agent-jtpjd                             1m           9Mi             
kube-system      konnectivity-agent-zj9mq                             1m           10Mi            
kube-system      kube-proxy-b76lp                                     1m           19Mi            
kube-system      kube-proxy-gr4l5                                     1m           21Mi            
kube-system      kube-proxy-k79mg                                     1m           18Mi            
kube-system      kube-proxy-xkj6t                                     1m           18Mi            
metrics-server   metrics-server-f65cd588d-2kqx6                       3m           34Mi            
metrics-server   metrics-server-f65cd588d-qxc2s                       3m           36Mi            
multibot         main-container-5fbbf7cbbd-42sxg                      0m           80Mi            
multibot         main-container-5fbbf7cbbd-fxh4t                      0m           77Mi            
multibot         tenant-container-fernsmaximum-748847894f-62lm4       1m           85Mi            
multibot         tenant-container-gmlradio-6c78c456c8-7h459           1m           87Mi            
multibot         tenant-container-hakotori-64db67684f-clf5m           5m           81Mi            
multibot         tenant-container-jjvanvan-5f58994c94-h25tb           1m           104Mi           
multibot         tenant-container-minecraft1167890-6db7d7df9c-9jp2d   1m           87Mi            
multibot         tenant-container-nathanshinelive-6949d547fc-dpm94    0m           70Mi            
multibot         tenant-container-raq583-57648c4699-74jjq             1m           84Mi            
multibot         tenant-container-thevictoriavixen-667d47556c-k9mk4   1m           83Mi            
multibot         tenant-container-zoetak-66ccdb656f-7lwwh             0m           84Mi            
NAME                             CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   
jjbotbot-k8s-node-pool-1-gsdpb   62m          6%     1063Mi          67%       
jjbotbot-k8s-node-pool-1-gsdpj   35m          3%     1089Mi          69%       
jjbotbot-k8s-node-pool-1-gsdpr   40m          4%     1069Mi          67%       
jjbotbot-k8s-node-pool-2-gchh8   69m          3%     1859Mi          59%   
+rewrite main container
+get twitch login and redis session working
+fix proxy
+tweak frontend to work with golang templates
+Dockerfile for golang build
+reduce size of docker image (nodejs ~200MB -> golang ~2GB :[ -> golang from scratch ~50MB, yay!)
    nodejs: johanvandegriff/multibot-tenant      5ff3d19   36acdc2687e8   2 months ago        264MB
    nodejs: johanvandegriff/multibot-main        5ff3d19   fb910ab9425b   2 months ago        179MB
    golang: johanvandegriff/multibot-tenant      latest    0e5baa5ca2ac   About an hour ago   16.2MB
    golang: johanvandegriff/multibot-main        latest    6eb3cfa2d3b1   About an hour ago   57.7MB
+Dockerfile SSL cert fix
+scripts for running directly, docker-compose, minikube (no change there)
+get k8s connection working
+rewrite tenant container
+twitch, youtube, owncast, kick chat connections
+fork and fix golang kick chat library
+find_youtube_id
+channelAuthMiddleware
+property listeners to connect to chats when youtube/owncast/kick ID changes
+skip youtube chats older than 60sec
+twitch !commands and posting to twitch chat
+nicknames
+emotes 7TV, BTTV, FFZ, YT
+pronouns
+profanity filter
+command forwarding
+clear chat command
+status for each chat connection
+youtube emotes from yt.json
+review server.js to look for missing features and inconsistencies
+test extensively on minikube
+fix disable not disconnecting from chats
+say "connected/disconnected youtube chat" in twitch chat
+say "connected/disconnected owncast chat" in twitch chat
+fix popout fullscreen chat bgcolor logic
+commit code
+fix redis session issue
+fix super admin detection
+deploy to k8s
+measure the resource usage after migrating (much better! at least for this app, k8s itself has a lot of overhead)
NAMESPACE        NAME                                                 CPU(cores)   MEMORY(bytes)   
cert-manager     cert-manager-9f64787fb-vrvj8                         2m           27Mi            
cert-manager     cert-manager-cainjector-56c6b7f795-lb67j             2m           41Mi            
cert-manager     cert-manager-webhook-84d5dfd488-8x52n                1m           14Mi            
ingress-nginx    ingress-nginx-controller-7d56585cd5-b4lpp            7m           46Mi            
kube-system      cilium-4ns56                                         25m          255Mi           
kube-system      cilium-wzzdn                                         12m          206Mi           
kube-system      coredns-c5c6457c-nwwhk                               4m           25Mi            
kube-system      coredns-c5c6457c-vrhhj                               4m           25Mi            
kube-system      cpc-bridge-proxy-74dpc                               1m           2Mi             
kube-system      cpc-bridge-proxy-wbtsc                               1m           1Mi             
kube-system      csi-do-node-g7bbg                                    1m           14Mi            
kube-system      csi-do-node-wmrkc                                    1m           10Mi            
kube-system      do-node-agent-f7lkh                                  1m           20Mi            
kube-system      do-node-agent-ws54w                                  0m           24Mi            
kube-system      hubble-relay-67597fb8-9sk57                          1m           23Mi            
kube-system      hubble-ui-79957d9f7b-pjf27                           1m           22Mi            
kube-system      konnectivity-agent-5vrjl                             1m           10Mi            
kube-system      konnectivity-agent-dfszf                             2m           10Mi            
kube-system      kube-proxy-k79mg                                     1m           20Mi            
kube-system      kube-proxy-xkj6t                                     1m           20Mi            
metrics-server   metrics-server-f65cd588d-2kqx6                       3m           33Mi            
metrics-server   metrics-server-f65cd588d-qxc2s                       4m           35Mi            
multibot         main-container-57f7dd95c4-lbmtt                      1m           11Mi            
multibot         main-container-59bcbbdfc5-wm9rt                      1m           11Mi            
multibot         tenant-container-fernsmaximum-77544c6d8b-b8w5f       1m           7Mi             
multibot         tenant-container-gmlradio-797dc77f65-f6p68           1m           8Mi             
multibot         tenant-container-hakotori-84c66dc6ff-rlb6t           11m          11Mi            
multibot         tenant-container-jjvanvan-7477b6c584-kk28d           1m           8Mi             
multibot         tenant-container-minecraft1167890-84b88b75c7-9575p   0m           7Mi             
multibot         tenant-container-nathanshinelive-7c7657c9dc-cfn68    0m           7Mi             
multibot         tenant-container-raq583-7b56b5b7c6-dvdks             1m           8Mi             
multibot         tenant-container-thevictoriavixen-7cdf46fcd8-dqzsh   1m           7Mi             
multibot         tenant-container-zoetak-7dd5d4c68-5gsp2              1m           10Mi            
NAME                             CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   
jjbotbot-k8s-node-pool-1-gsdpb   52m          5%     989Mi           62%       
jjbotbot-k8s-node-pool-2-gchh8   135m         7%     1978Mi          63%       
+commit code

NEW FEATURES TO ADD:
+on frontend, update nickname in chat when it changes
+move session stuff to its own file
+share session code between both containers
+split things into separate packages
link to twitch, yt, etc. on a channel page even when not logged in
RTMP livestream splitting with 2nd tenant container
OBS container hosting with 3rd tenant container
probably not: owncast hosting?
text streaming with asciiradio that somehow forwards to video stream, maybe thru OBS container
option to split or combine chats
option to read out the chat with TTS
only allow 24-7 streams at 360p

redis lua scripts
make the namespace configurable for redis and k8s
standardize live chat connections
decent looking UI
    +copy from old one and fix up
    +better font
    +add padding and margins where needed
    better nav with search
    time duration picker
should a viewer be deleted if they unset their nickname? maybe only if they have no properties left (e.g. no custom greetz)
work with new https://pr.alejo.io/faq as well as the old version
maybe: viewer can set custom pronouns that aren't on alejo
+retroactively add pronouns to first message after fetched
use redis for last_seen with builtin expiration (but make sure to change expiration when thresholds are changed, or dont use them)
move emote and pronoun caches to redis
maybe: dedicated proxy containers for channel-independent tasks, e.g. pronoun/emote cache
maybe: temporarily add more twitch/yt/owncast/kick chats for collabs
maybe: move routing from main-container to k8s ingress or gateway API
+404 page on tenant-container
+404 page on main-container (figure out how to not interfere with dynamically added proxies and wait_for_page)
if a nonexistant page matches the twitch username requirements, offer to sign up
better logging (might come for free with tenant container docker logs)
feature toggles
maybe once feature toggles are added, remove the channel enable/disable since you can already onboard/offboard
toggle verbose logging?
handle display name being different language than username (e.g. porukun21) just check lowercase and if different, include username, unless nickname set (username becomes a defacto nickname)
admin feature toggle to enable/disable signups
option to pay for signups
database editor
twitch mods have permission to access the streamer's settings page
permissions system (super admin, streamer, mods, etc.)
maybe (prob not): should work if u dont have twitch (e.g. primary login with email)
at least add owncast as a primary login method
revamp CARL chatbot to be part of the system with moderation tools in place
CARL should be its own container that autoscales
random nickname if none provided
timeout on signup/delete account to avoid spam
make messages disappear after a timeout?
bot greets users without a nickname
onboarding tutorial/help button
custom code system with DO functions? or app platform? need live connection for efficiency
marketplace for plugins
integrate popular plugins into main code
change !nickname to !getnickname, and !setnickname to !nickname or !nick
maybe: provide ollama URL and API key (for me, running locally on laptop GPU, confuzer in future)
summary of youtube chat in twitch chat and vice versa? what about owncast and kick? maybe summarize all chats together and put in all chats
fun stats on main page

FROM PREVIOUS TODO:
//===PRIORITY===
//TODO public dashboard page
//TODO follows
//TODO channel point redeems, bits, subs, etc.
//TODO function for super admin to import/export json for 1 channel or all
//TODO play audio thru multichat page, or separate alerts page
//TODO able to enable by typing !enable/!disable in the bot's twitch chat  opts.channels.push(process.env.TWITCH_BOT_USERNAME);
+maybe migrate to app platform? or cloudways or k8s since they have better autoscaling. either way will require refactoring the secrets storage and chat connections
+system to backup the data
//TODO bot able to post on youtube

//===EASY===
+link to source code on the page

//===BUGS===
//TODO failed to get chat messages after saying it was connected on the 1min timer
//TODO bot missing username when enabled and already has youtube_id ": connected to youtube chat"
//TODO bot keeps reconnecting to twitch chat, maybe every youtube check?
still skips some youtube messages

//===REFACTOR===
+abstract out the sharing of state thru sockets?
+rethink the api paths to something like /api/channels/:channel/nicknames/:username etc.
+make it able to scale horizontally

//TODO allow mods to use the admin page for the streamer
//TODO give the bot "watching without audio/video" badge
+youtube emotes
//TODO clear chat automatically?
//TODO remove deleted messages (timeouts, bans, individually deleted messages)
//TODO better UI for greetz threshold
//TODO bot respond to alerts
//TODO separate vip chat
//TODO commands in the bot's chat to play videos on the bot's stream
//TODO a way for super admin to call an api to get/set/delete anything in the database, for example delete last seen time
//TODO twitch badges
//TODO twitch /me
    context['message-type'] could be 'whisper', 'action' (for /me), or 'chat'
//TODO twitch show replies
//TODO do an actual reply instead of @'ing the user
//TODO !songlist reply on youtube - You: !songlist Nightbot: @You -> The song list for this channel is available at https://nightbot.tv/t/streamer/song_requests
//TODO when !songlist is typed on youtube, reply with `The song list for this channel is available at https://nightbot.tv/t/[channel]/song_requests`
//TODO summary of youtube chat in twitch chat and vice versa? what about owncast? exponential combinatorics as more chats are added
//TODO command forwarding from owncast to twitch?
//TODO get the correct username color from youtube
